//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TutDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TutDBEntities : DbContext
    {
        public TutDBEntities()
            : base("name=TutDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<tblBasicMaster> tblBasicMasters { get; set; }
        public DbSet<tblBatchCourse> tblBatchCourses { get; set; }
        public DbSet<tblBatchMaster> tblBatchMasters { get; set; }
        public DbSet<tblCityMaster> tblCityMasters { get; set; }
        public DbSet<tblCourseMaster> tblCourseMasters { get; set; }
        public DbSet<tblCourseSubjectMapping> tblCourseSubjectMappings { get; set; }
        public DbSet<tblEmployeeDetail> tblEmployeeDetails { get; set; }
        public DbSet<tblFeesDetail> tblFeesDetails { get; set; }
        public DbSet<tblFeesMaster> tblFeesMasters { get; set; }
        public DbSet<tblFeeStructure> tblFeeStructures { get; set; }
        public DbSet<tblGenderMaster> tblGenderMasters { get; set; }
        public DbSet<tblLocationMaster> tblLocationMasters { get; set; }
        public DbSet<tblLocationRoomMapping> tblLocationRoomMappings { get; set; }
        public DbSet<tblRoomMaster> tblRoomMasters { get; set; }
        public DbSet<tblSessionActivity> tblSessionActivities { get; set; }
        public DbSet<tblSessionMaster> tblSessionMasters { get; set; }
        public DbSet<tblStaffAttendance> tblStaffAttendances { get; set; }
        public DbSet<tblStudentAllocation> tblStudentAllocations { get; set; }
        public DbSet<tblStudentAttendance> tblStudentAttendances { get; set; }
        public DbSet<tblStudentDetail> tblStudentDetails { get; set; }
        public DbSet<tblSubjectEmployeeMapping> tblSubjectEmployeeMappings { get; set; }
        public DbSet<tblSubjectMaster> tblSubjectMasters { get; set; }
        public DbSet<tblTaskMaster> tblTaskMasters { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_createInstallment(Nullable<int> studentId, Nullable<int> installmentNo, Nullable<int> payPattern, Nullable<int> payInterval, Nullable<System.DateTime> preferredDate, Nullable<decimal> preferredAmount)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var installmentNoParameter = installmentNo.HasValue ?
                new ObjectParameter("installmentNo", installmentNo) :
                new ObjectParameter("installmentNo", typeof(int));
    
            var payPatternParameter = payPattern.HasValue ?
                new ObjectParameter("payPattern", payPattern) :
                new ObjectParameter("payPattern", typeof(int));
    
            var payIntervalParameter = payInterval.HasValue ?
                new ObjectParameter("payInterval", payInterval) :
                new ObjectParameter("payInterval", typeof(int));
    
            var preferredDateParameter = preferredDate.HasValue ?
                new ObjectParameter("preferredDate", preferredDate) :
                new ObjectParameter("preferredDate", typeof(System.DateTime));
    
            var preferredAmountParameter = preferredAmount.HasValue ?
                new ObjectParameter("preferredAmount", preferredAmount) :
                new ObjectParameter("preferredAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_createInstallment", studentIdParameter, installmentNoParameter, payPatternParameter, payIntervalParameter, preferredDateParameter, preferredAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_createSessionActivityAlternate(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> sessionId, Nullable<int> courseId, Nullable<int> batchId, Nullable<int> subjectId, Nullable<int> taskId, Nullable<int> locationId, Nullable<int> roomId, Nullable<int> duration)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.TimeSpan));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_createSessionActivityAlternate", dateFromParameter, dateToParameter, startTimeParameter, endTimeParameter, sessionIdParameter, courseIdParameter, batchIdParameter, subjectIdParameter, taskIdParameter, locationIdParameter, roomIdParameter, durationParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_createSessionActivityAlternateExceptSundays(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> sessionId, Nullable<int> courseId, Nullable<int> batchId, Nullable<int> subjectId, Nullable<int> taskId, Nullable<int> locationId, Nullable<int> roomId, Nullable<int> duration)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.TimeSpan));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_createSessionActivityAlternateExceptSundays", dateFromParameter, dateToParameter, startTimeParameter, endTimeParameter, sessionIdParameter, courseIdParameter, batchIdParameter, subjectIdParameter, taskIdParameter, locationIdParameter, roomIdParameter, durationParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_createSessionActivityDaily(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> sessionId, Nullable<int> courseId, Nullable<int> batchId, Nullable<int> subjectId, Nullable<int> taskId, Nullable<int> locationId, Nullable<int> roomId, Nullable<int> duration)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.TimeSpan));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_createSessionActivityDaily", dateFromParameter, dateToParameter, startTimeParameter, endTimeParameter, sessionIdParameter, courseIdParameter, batchIdParameter, subjectIdParameter, taskIdParameter, locationIdParameter, roomIdParameter, durationParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_createSessionActivityDailyExceptSunday(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> sessionId, Nullable<int> courseId, Nullable<int> batchId, Nullable<int> subjectId, Nullable<int> taskId, Nullable<int> locationId, Nullable<int> roomId, Nullable<int> duration)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.TimeSpan));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_createSessionActivityDailyExceptSunday", dateFromParameter, dateToParameter, startTimeParameter, endTimeParameter, sessionIdParameter, courseIdParameter, batchIdParameter, subjectIdParameter, taskIdParameter, locationIdParameter, roomIdParameter, durationParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_createSessionActivityMonthly(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> sessionId, Nullable<int> courseId, Nullable<int> batchId, Nullable<int> subjectId, Nullable<int> taskId, Nullable<int> locationId, Nullable<int> roomId, Nullable<int> duration)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.TimeSpan));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_createSessionActivityMonthly", dateFromParameter, dateToParameter, startTimeParameter, endTimeParameter, sessionIdParameter, courseIdParameter, batchIdParameter, subjectIdParameter, taskIdParameter, locationIdParameter, roomIdParameter, durationParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_createSessionActivityWeekly(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> sessionId, Nullable<int> courseId, Nullable<int> batchId, Nullable<int> subjectId, Nullable<int> taskId, Nullable<int> locationId, Nullable<int> roomId, Nullable<int> duration)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.TimeSpan));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_createSessionActivityWeekly", dateFromParameter, dateToParameter, startTimeParameter, endTimeParameter, sessionIdParameter, courseIdParameter, batchIdParameter, subjectIdParameter, taskIdParameter, locationIdParameter, roomIdParameter, durationParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_createSessionActivityWeeklyExceptSunday(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<int> sessionId, Nullable<int> courseId, Nullable<int> batchId, Nullable<int> subjectId, Nullable<int> taskId, Nullable<int> locationId, Nullable<int> roomId, Nullable<int> duration)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("startTime", startTime) :
                new ObjectParameter("startTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.TimeSpan));
    
            var sessionIdParameter = sessionId.HasValue ?
                new ObjectParameter("sessionId", sessionId) :
                new ObjectParameter("sessionId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var taskIdParameter = taskId.HasValue ?
                new ObjectParameter("taskId", taskId) :
                new ObjectParameter("taskId", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(int));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_createSessionActivityWeeklyExceptSunday", dateFromParameter, dateToParameter, startTimeParameter, endTimeParameter, sessionIdParameter, courseIdParameter, batchIdParameter, subjectIdParameter, taskIdParameter, locationIdParameter, roomIdParameter, durationParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
